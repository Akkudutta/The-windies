import pandas as pd
import requests
import openpyxl
from streamlit_option_menu import option_menu
import streamlit as st
from streamlit_lottie import st_lottie
from PIL import Image
import pickle
import calendar
from sklearn.ensemble import RandomForestRegressor

#-----Setup Page Title---
#Find more emojis here: https://www.webfx.com/tools/emoji-cheat-sheet/
st.set_page_config(page_title = "THE WINDIES - EPDS03", page_icon = "ðŸ–¥", layout = "wide")

#Lottie animation files link: https://lottiefiles.com/search?q=machine%20learning&category=animations
@st.cache()   #Lottie Cache Setup
def load_lottieurl(url):
   r = requests.get(url)
   if r.status_code != 200:
        return  None
   return r.json()
@st.cache()   #Image Cache Setup
def load_image(filename):
    l_img = Image.open(filename)
    return (l_img)

#----USE LOCAL CSS-------
#Style.css file download: https://github.com/Sven-Bo/personal-website-streamlit/blob/master/style/style.css
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

local_css("Style/Style.css")

@st.cache   #Dataframe cache setup
def load_data(filename):
    xl_df = pd.read_excel(filename)
    return xl_df

#-----MACHINE LEARNING MODEL-----
#regr = RandomForestRegressor(max_depth=None, n_estimators=300)

@st.cache(allow_output_mutation=True)   #Model Cache Setup
def load_rf(filename):
    rfgr = pickle.load(open(filename, 'rb'))
    return (rfgr)

#excel_train = 'trainrf.xlsx'
#xl_df = load_data(excel_train)
#X_train = xl_df.iloc[:, :-1]
#Y_train = xl_df.iloc[:, -1:]
#rfgr = rf_fit(X_train, Y_train.values.ravel())

#Navigation Menu
with st.sidebar:
    selected =  option_menu(
    menu_title = "THE WINDIES",
    options = ["Introduction","Steps For Prediction", "Problem Statement", "Libraries Used", "Data Collection", "EDA", "Regression", "Feature Selection","Splitting Dataset", "Model Selection", "Linear Regression", "Decision Tree", "Boosting", "Random Forest", "Comparision","Conclusion", "Predict Power", "Review Us"],
    menu_icon = "graph-up-arrow"
    )

#-----LOAD LOTTIES----
lottie_code = load_lottieurl("https://assets7.lottiefiles.com/private_files/lf30_ipvphpwo.json")
lottie_coding = load_lottieurl("https://assets1.lottiefiles.com/packages/lf20_9rtptw4q.json")
lottie_header = load_lottieurl("https://assets6.lottiefiles.com/packages/lf20_nlce6fdr.json")
lottie_ml = load_lottieurl("https://assets1.lottiefiles.com/private_files/lf30_m075yjya.json")
lottie_ds = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_qp1q7mct.json")
lottie_ds1 = load_lottieurl("https://assets3.lottiefiles.com/private_files/lf30_ajzyv37m.json")
lottie_ds2 = load_lottieurl("https://assets7.lottiefiles.com/packages/lf20_q5qeoo3q.json")
lottie_review = load_lottieurl("https://assets9.lottiefiles.com/packages/lf20_05bmkwnh.json")


c1, c2, c3, c4, c5, c6, c7 = st.columns(7)
with c1:
    l_img = load_image("Images/IIML.png")
    st.image(l_img, width=90)
with c2:
    st.empty()
with c3:
    st.empty()
with c4:
    st.empty()
with c5:
    st_lottie(lottie_ds1, height = 100, key = "DS1")
with c6:
    st_lottie(lottie_ds2, height=100, key="Data_Science")
with c7:
    st_lottie(lottie_ds, height = 100, key = "DS2")
#-----HEADER SECTION--------
if selected == "Introduction":
    left_column, right_column = st.columns(2)
    with left_column:
        with st.container():
            st.title("THE WINDIES")
            st.subheader("Windmill Power Prediction")
            st.write("A Project by IIML-EPDS Batch 3 Students")

            #-----PROJECT MEMBERS-----
            st.write("##")
            st.subheader("PROJECT MEMBERS")
            st.write(
             """
             1. SAMARPITA MOHAPATRA
             2. KAUSTUBH DESAI
             3. SANDIPU KUMARI
             4. SHREYA BASU
             5. AAKARSHAN DUTTA
             6. VIKASH YADAV
             7. SAKTHI SHANMUGAM
             8. SHIVA PRASAD ELLUR
             """
            )
        with right_column:
            st_lottie(lottie_header, height = 600, key = "Windmill1")
    st.write("---")

#---STEPS---
if selected == "Steps For Prediction":
    with st.container():
        st.header("STEPS FOR PREDICTION")
        st.write("##")
        l_img = load_image("Images/steps_1.PNG")
        st.image(l_img)
    st.write("---")

#-----PROBLEM STATEMENT-----
if selected == "Problem Statement":
    with st.container():
        left_column, right_column = st.columns(2)
        with left_column:
            st.header("OBJECTIVE-PROBLEM STATEMENT")
            st.write("##")
            st.markdown(":arrow_right: ***To identify the key features that impact the windmill's power generation.***")
            st.markdown(":arrow_right: ***To predict power generated by windmill based on historical data.***")
            st.write("##")
            st.write(
            """
            With global warming at its peak and fossil fuels inching towards its extinction, it is the need of the hour to step up and take responsibility for our planet.
            An efficient energy source that has been gaining popularity around the world is wind turbines. Wind turbines generate power by capturing the kinetic energy of the wind. Factors such as temperature, wind direction, turbine status, weather, blade length, and so on influence the amount of power generated.
            """
            )

        with right_column:
            st_lottie(lottie_coding, height = 400, key = "Windmill")
    st.write("---")

#---LIBRARIES---
if selected == "Libraries Used":
    with st.container():
        st.header("TECHNOLOGIES USED AND LIBRARIES IMPORTED")
        st.write("##")
        l_col,r_col = st.columns(2)
        with l_col:
            st.subheader("LIBRARIES USED")
            st.write(
            """
library(readr)          # Data Read & Manipulation\n
library(dplyr)          # Data Manipulation\n
library(superml)        # Label Encoding\n
library(imputeTS)       # Mean Imputing\n
library(outliers)       # Remove Outliers\n
library(funModeling)    # Analysing Numeric Features\n
library(naniar)         # Analysis Missing Values\n
library(ggplot2)        # Correlation Matrix\n
library(GGally)         # Correlation Matrix\n
library(caret)\n
library(relaimpo)\n
library(randomForest)\n
library(gbm)\n
library(rpart)\n
library(rpart.plot)  #for plotting decision trees\n
library(car)\n
library(hrbrthemes)\n
library(modelr)\n
library(reprtree)\n
library(ggRandomForests)\n
library(splitTools)     #for splitting data
"""
        )
        with r_col:
            l_img = load_image("Images/Lib2.PNG")
            st.image(l_img)
            st_lottie(lottie_code, height = 700, key = "Code")
    st.write("---")

#---Data Collection---
if selected == "Data Collection":
    with st.container():
        st.header("DATA COLLECTION & PREPERATION")
        st.write("##")
        lcl,rcl = st.columns(2)
        with lcl:
            st.subheader("DATA COLLECTION")
            st.markdown("[Link for the data](https://www.kaggle.com/code/mykeysid10/windmill-power-prediction)")
            st.write("Data availability- 2018 and 2019 random data")
            st.write("##")
            st.subheader("DATA PREPERATION")
            st.write("""
        1.Changing Column Names\n
        2.Data split to date time into year month and day.\n
        3.Dropping records having Windmill Power = NA & Unwanted Features\n
        """)
        with rcl:
            st.subheader("RAW DATASET")
        # ----Laod Dataframe----
            excel_file = 'Windmilla Data.xlsx'
            #sheet_name = 'Windmilla Data'
            xl_df = load_data(excel_file)
            st.dataframe(xl_df)
    l_img = load_image("Images/Data_prep.png")
    st.image(l_img, use_column_width = True)
    st.write("---")

#-----EDA-----
if selected == "EDA":
    with st.container():
        with st.container():
            st.header("EXPLORATORY DATA ANALYSIS (EDA)")
            st.write("##")
            image_column, text_column = st.columns((1,2))
            with image_column:
                l_img = load_image("Images/mgf.jpg")
                st.image(l_img)
            with text_column:
                st.write("""
             Identify missing values\n
Plot data for analysis like box plots for outliers' identification\n
Analyze all the Categorical Features and Numeric Features\n
Impute on Categorical & Numeric Features\n
Check muti collinearity using VIF
              """)
        st.write("\n")
        with st.container():
            left_col,right_col = st.columns(2)
            with left_col:
                st.subheader("Numerical Feature Analysis")
                l_img = load_image("Images/Variance.png")
                st.image(l_img)
            with right_col:
                st.subheader("Missing Value Identification")
                l_img = load_image("Images/Percentage.png")
                st.image(l_img)
        st.write("\n")
        st.subheader("Categorical Feature Analysis")
        l_img = load_image("Images/Categorical.png")
        st.image(l_img)
        st.write("\n")
        st.write("##")
        st.subheader("Plotting of Box Plots for Outlier Detection")
        l_img = load_image("Images/Box Plots.png")
        st.image(l_img)
        st.write("\n")
        image_column, text_column = st.columns(2)
        with image_column:
            st.write("##")
            st.subheader("Checking VIF Values")
            l_img = load_image("Images/VIF.png")
            st.image(l_img)
        with text_column:
            st.write("##")
            st.subheader("Steps To Check Multicollinearity")
            st.write("##")
            st.write("""\n
        ##
    Data Imputation on Categorical & Numeric Features(missing values replaced with average)\n\n
    ##
    Checking multi-collinearity using VIF\n\n
    ##
    Motor torque, generator temperature had VIF >5\n\n
    ##
    Checked correlation of above parameters with windmill_generated_power, motor torque has a higher correlation with windmill_generated_power.
                  """)
        st.write("##")
        st.subheader("Checking Correlation")
        left_col,right_col = st.columns(2)
        with left_col:
            l_img = load_image("Images/corr1.png")
            st.image(l_img)
        with right_col:
            l_img = load_image("Images/corr2.png")
            st.image(l_img)
    st.write("##")
    st.subheader("FINAL DATASET AFTER EDA")
    excel_1 = 'Clean Data.xlsx'
    #sheet_name = 'Sheet1'

    xl_df = load_data(excel_1)
    st.dataframe(xl_df)
    st.write("---")

#LINEAR REGRESSION
if selected == "Regression":
    with st.container():
        st.header("LINEAR REGRESSION USING ALL FEATURES")
        st.write("##")
        st.markdown("""
    lm(formula = windmill_generated_power ~ ., data = train_data)\n
    Residual standard error: 1.988 on 16755 degrees of freedom\n
    Multiple R-squared:  0.4538,	Adjusted R-squared:  **0.4532**\n 
    F-statistic: 663.8 on 21 and 16775 DF,  p-value: < 2.2e-16\n
    ##
    Adjusted R square value is low hence next step would be feature selection
""")
        l_img = load_image("Images/LM1.png")
        st.image(l_img)
    st.write("---")

#FEATURE SELECTION
if selected == "Feature Selection":
    with st.container():
        st.header("FEATURE SELECTION")
        st.write("##")
        st.subheader("Three Models used for Feature Selection")
        st.write("""
    1. Stepwise regression ( Forward and Backward)\n
    2. RFE (Recursive Feature Elimination)\n
    3. Relative Importance Regression\n
""")
        left_col,right_col = st.columns(2)
        with left_col:
            st.write("##")
            st.subheader("Features given by Stepwise Regression")
            l_img = load_image("Images/Stp_Regr.png")
            st.image(l_img)
        with right_col:
            st.write("##")
            st.subheader("Features given by RIR")
            l_img = load_image("Images/RIR.png")
            st.image(l_img, width = 622)
        st.write("##")
        st.subheader("Features given by RFE")
        l_img = load_image("Images/RFE.png")
        st.image(l_img)
    st.write("---")

#------Train Test Split-------
if selected == "Splitting Dataset":
    with st.container():
        st.header("TRAIN TEST VALIDATION SPLIT")
        st.write("##")
        img_col, txt_col = st.columns(2)
        with img_col:
            l_img = load_image("Images/Train_test.jpg")
            st.image(l_img)
        with txt_col:
            with st.container():
                st.subheader("Decision for split ratio is made on basis of dataset size")
                st.write("##")
                l_img = load_image("Images/Table1.png")
                st.image(l_img)
        st.write("##")
        lcl, mcl, rcl = st.columns(3)
        with lcl:
            st.subheader("TRAIN DATA 60%")
            excel_train = 'train.xlsx'
            #sheet_name = 'Sheet1'
            xl_df = load_data(excel_train)
            st.dataframe(xl_df)
        with mcl:
            st.subheader("TEST DATA 20%")
            excel_test = 'test.xlsx'
            xl_df = load_data(excel_test)
            st.dataframe(xl_df)
        with rcl:
            st.subheader("VALIDATION DATA 20%")
            excel_valid = 'validate.xlsx'
            #sheet_name = 'Sheet1'
            xl_df = load_data(excel_valid)
            st.dataframe(xl_df)
    st.write("---")

#-----Model Selection-----
if selected == "Model Selection":
    with st.container():
        st.header("MODEL SELECTION")
        st.write("##")
        r_col, l_col = st.columns(2)
        with r_col:
            st.subheader("Models used to predict Windmill Power Generation")
            st.write(
            """
            Linear Regression\n
            Decision Tree\n
            Boosting\n
            Random forest\n
"""
        )
        with l_col:
            st_lottie(lottie_ml, height=300, key="Robot")
    st.write("---")

#----LINEAR REGRESSION----
if selected == "Linear Regression":
    with st.container():
        st.header("Linear Regression")
        st.write("##")
        img_col, txt_col = st.columns(2)
        with img_col:
            l_img = load_image("Images/Scatter_Plot_LR.png")
            st.image(l_img)
        with txt_col:
            l_img = load_image("Images/lr_train.png")
            st.image(l_img)
    st.write("---")

#-----DECISION TREE-----
if selected == "Decision Tree":
    with st.container():
        st.header("DECISION TREE")
        st.write("##")
        img_col, txt_col = st.columns(2)
        with img_col:
            l_img = load_image("Images/Rplot_tree.png")
            st.image(l_img)
        with txt_col:
            l_img =load_image("Images/dt_train.png")
            st.image(l_img)
    st.write("---")

#-----BOOSTING-----
if selected == "Boosting":
    with st.container():
        st.header("BOOSTING")
        st.write("##")
        left, right = st.columns(2)
        with left:
            l_img = load_image("Images/boosting1.png")
            st.image(l_img)
        with right:
            l_img = load_image("Images/Rplot_boost1.png")
            st.image(l_img)
            l_img = load_image("Images/Rplot_boost2.png")
            st.image(l_img)
    st.write("---")

#-----RANDOM FOREST-----
if selected == "Random Forest":
    with st.container():
        st.header("RANDOM FOREST")
        st.write("##")
        left, right = st.columns(2)
        with left:
            l_img = load_image("Images/Rplot_vimp.png")
            st.image(l_img)
        with right:
            l_img = load_image("Images/rf1.png")
            st.image(l_img, width=600)
            l_img = load_image("Images/rf2.png")
            st.image(l_img)
        st.write("##")
        left, right = st.columns(2)
        with left:
            l_img = load_image("Images/rf3.png")
            st.image(l_img)
            l_img = load_image("Images/rf4.png")
            st.image(l_img)
        with right:
            l_img = load_image("Images/rflm.png")
            st.image(l_img)
            l_img = load_image("Images/rf5.png")
            st.image(l_img)
    st.write("---")

#-----Comparision-----
if selected == "Comparision":
    with st.container():
        st.header("COMPARISION")
        st.write("##")
        st.subheader("COMPARISION OF ALL FOUR MODEL MATRICES")
        l_img = load_image("Images/Comparision.png")
        st.image(l_img)
        st.write("##")
        st.subheader("COMPARISION OF PREDICTION RESULTS OF ALL FOUR MODELS")
        l_img = load_image("Images/Prediction.png")
        st.image(l_img)
    st.write("---")

#------CONCLUSION------
if selected == "Conclusion":
    with st.container():
        st.header("CONCLUSION")
        st.write("##")
        st.subheader("Key Features Identified")
        l_img = load_image("Images/Key features.png")
        st.image(l_img)
        st.write("##")
        st.subheader("PREDICTIONS DONE ON VALIDATION DATASET")
        l_img = load_image("Images/comptab.png")
        st.image(l_img)
    st.write("---")

#------PREDICTING POWER USING ML------
if selected == "Predict Power":
    with st.container():
        #------Creating Variables------
        df = pd.DataFrame(
            {
                'wind_speed': [109.633],
                'blades_angle': [9.81],
                'gearbox_temperature': [58.129],
                'engine_temperature': [26.814],
                'motor_torque': [1737.799],
                'area_temperature': [16.383],
                'wind_direction': [277.227],
                'resistance': [1740.587],
            }
        )
        variables = ["Wind Speed (m/s)","Blades Angle(Â°)","Gearbox Temperature(Â°C)", "Engine Temperature(Â°C)","Motor Torque(N-m)","Area Temperature(Â°C)", "Wind Direction(Â°)", "Resistance(Ohm)"]
        months = list(calendar.month_name[1:])

        #----form----
        st.header("WINDMILL POWER PREDICTION")
        st.write("##")
        st.subheader("Please input your readings below in the following sections")
        with st.form("entry_form", clear_on_submit = True):
            st.selectbox("Select Month:", months, key = "month")
            for variable in variables:
                st.number_input(f"{variable}", format = "%f", key = variable)
            submitted = st.form_submit_button()
            if submitted:
                months = list(st.session_state["month"])
                variables =  {variable: st.session_state[variable] for variable in variables}
            #----PREDICTION----
                with st.container():
                    #---putting input values---
                    #df["month"] = months[month]
                    df["wind_speed"] = variables["Wind Speed (m/s)"]
                    df["blades_angle"] = variables["Blades Angle(Â°)"]
                    df["gearbox_temperature"] = variables["Gearbox Temperature(Â°C)"]
                    df["engine_temperature"] = variables["Engine Temperature(Â°C)"]
                    df["motor_torque"] = variables["Motor Torque(N-m)"]
                    df["area_temperature"] = variables["Area Temperature(Â°C)"]
                    df["wind_direction"] = variables["Wind Direction(Â°)"]
                    df["resistance"] = variables["Resistance(Ohm)"]
                    X = df
                    rfgr = load_rf('Rf_model.sav')
                    prediction = rfgr.predict(X)
                    prediction = prediction[0]
                st.success(f"Your Predicted Value is: **{prediction:.2f}** (kW/h)")



# -----CONTACT------
if selected == "Review Us":
    with st.container():
        st.header("Please write your review of the presentation!")
        st.write("##")
    #Documentation  : https://formsubmit.co/ !!!CHANGE EMAIL ADDRESS!!!
        contact_form = """
<form action="https://formsubmit.co/akku.dutta@gmail.com" method="POST">
<input type="hidden" name="_captcha" value="false">   
<input type="text" name="name" placeholder="Full Name" required>
<input type="text" name="contact number" placeholder="Contact Number" required>
<input type="email" name="email" placeholder="Email ID" required>
<textarea name="review" placeholder="Your Review" required></textarea>
<button type="submit">Send</button>
</form>
    """

    left_column, right_column = st.columns(2)
    with left_column:
        st.markdown(contact_form, unsafe_allow_html = True)
    with right_column:
        st_lottie(lottie_review, height = 300, key = "Review")
    lll, mmm, rrr = st.columns(3)
    with lll:
        st.empty()
    with mmm:
        st.header("THANK YOU :smiley:!!")
    with rrr:
        st.empty()
    st.write("---")
